# Kenzan laptop specific .bashrc settings
# Should be sourced by .bashrc

PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
PATH="/usr/local/opt/node@10/bin:$PATH"

source "${gcode}/CurtisFleming/elspleth-charter/scripts/website-library.sh"

alias sow='open ${HOME}/Documents/projects/charter/gitlab-migration/kickoff-docs/FINAL\ Charter-Kenzan\ -\ Statement\ of\ Work\ No.\ 7\ \(Legacy\ Decomission\)\ \(05.20.20\)\ Clean\ v2.docx'

# Typos
piplines=pipelines

export_charter_personal_gitlab() {
  export API_V4_TOKEN="$(cat "${HOME}"/secrets/charter-gitlab-personal-access-token)"
  export CI_API_V4_URL='https://gitlab.spectrumflow.net/api/v4'
  echo "exported API_V4_TOKEN"
  echo "exported CI_API_V4_URL"
}

export_charter_personal_artifactory() {
  export ARTIFACTORY_EMAIL='c-curtis.fleming@charter.com'
  export ARTIFACTORY_API_KEY="$(cat "${HOME}"/secrets/charter-artifactory-api-token)"
  _common_export_artifactory
}

export_charter_sspp_ci_artifactory() {
  export ARTIFACTORY_EMAIL='sspp-ci'
  export ARTIFACTORY_API_KEY="$(cat "${HOME}"/secrets/charter-artifactory-sspp-ci-token)"
  _common_export_artifactory
}

_common_export_artifactory() {
  export BASE_ARTIFACTORY_DOCKER_URL="docker-artifactory.spectrumflow.net/docker/sspp/portals/"
  echo "exported ARTIFACTORY_EMAIL=${ARTIFACTORY_EMAIL}"
  echo "exported ARTIFACTORY_API_KEY"
  echo "exported BASE_ARTIFACTORY_DOCKER_URL=${BASE_ARTIFACTORY_DOCKER_URL}"
  echo 'copy/paste for curl: -u "$ARTIFACTORY_EMAIL:$ARTIFACTORY_API_KEY"'
}

bootstrap_tmp="${HOME}/bootstrap_tmp"
mkdir -p "${bootstrap_tmp}"

_async_start() {
  (
  local _kube_envs=($(kubectx))
  for kube_env in "${_kube_envs[@]}"; do
    if ! alias -p | grep -Pq '^alias '"${kube_env}"'='; then
      echo "${kube_env}"
    fi
  done
  ) >"${bootstrap_tmp}/kubectx_aliases" &
  (
  find "${gcode}"/sspp/portals-backend/application/services -maxdepth 1
  find "${gcode}"/sspp/portals-backend/application/libraries -maxdepth 1
  find "${gcode}"/sspp/portals-backend/application/sidecars -maxdepth 1
  find "${gcode}"/sspp/portals-backend/maintenance-and-upgrades -maxdepth 1
  find "${gcode}"/sspp/platforms -maxdepth 1
  find "${gcode}"/sspp/portals-backend -maxdepth 1
  find "${gcode}"/sspp -maxdepth 1
  find "${gcode}"/spectrumflow/shared/platform-components -maxdepth 1
  find "${gcode}"/spectrumflow/shared/platform-e2e-pipelines -maxdepth 1
  find "${gcode}"/spectrumflow/shared/platform-e2e-pipelines/portals-backend -maxdepth 1
  find "${gcode}"/CurtisFleming -maxdepth 1
  echo "${gcode}"/sspp/portals-backend/release-plan/spectrummobile-release-plan/spectrummobile-release-plan
  echo "${gcode}"/sspp/portals-backend/release-plan/myspectrumapp-release-plan/myspectrumapp-release-plan
  echo "${gcode}"/sspp/portals-backend/release-plan/spectrum-release-plan/spectrum-release-plan
  echo "${gcode}"/sspp/portals-backend/release-plan/spectrumbusiness-release-plan/spectrumbusiness-release-plan
  echo "${gcode}"/sspp/portals-backend/release-plan/active-helm-chart-report
  ) >"${bootstrap_tmp}/project_path_aliases" &
}

_async_join() {
  wait
  local kubectx_aliases
  local kube_env
  mapfile -t kubectx_aliases < <(cat "${bootstrap_tmp}/kubectx_aliases")
  for kube_env in "${kubectx_aliases[@]}"; do
    alias "${kube_env}=kubectx ${kube_env}"
  done
  local project_path_aliases
  local project_to_alias
  mapfile -t project_path_aliases < <(cat "${bootstrap_tmp}/project_path_aliases")
  for project_to_alias in "${project_path_aliases[@]}"; do
    alias "${project_to_alias##*/}=cd '${project_to_alias}'"
  done
}

_async_start
_async_join 2>/dev/null

alias cnet='kubens cnet'

# Often enough
clone_sspp() {
  "${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams/turquoise/gitlab-cloning/clone-gitlab-repos.sh "${gcode}" sspp "$HOME/secrets/charter-gitlab-personal-access-token"
}
alias teams='cd "${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams'
alias cloner='cd "${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams/turquoise/gitlab-cloning'
alias release='"${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams/innovation/release.sh'

# References
alias curl_notes='open ~/Documents/projects/charter/curl-to-end-all-curls.md'
alias cassandra_notes='open ~/Documents/projects/charter/efforts/cassandra/cassandra-notes.md'

# Mac
alias json='pbpaste | jq | pbcopy'

# Stash Places
alias ourlib='cd "${code}"/portals-jenkins-library'
alias theirlib='cd "${code}"/jenkins_shared_library'
alias dsl='cd "${code}"/jenkins-job-dsl'
alias dp='cd "${code}"/docker-provisioning'
alias cnethelm='cd "${code}"/cnet_helm'

# Gitlab Places
alias gcode='cd "${gcode}"'
alias sspp='cd "${gcode}"/sspp'
alias services='cd "${gcode}"/sspp/portals-backend/application/services'
alias libs='cd "${gcode}"/sspp/portals-backend/application/libraries'
alias notes='cd "${notes}"'
alias projects='cd ~/Documents/projects'
alias charter='cd "${HOME}"/Documents/projects/charter'

# Apps
alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
alias google='chrome'
alias grapher='(cd ~/Documents/tools/grapher && java -jar Fleye.jar 1> /dev/null 2>&1 &)'
alias fleye='grapher'

alias vscoderc='vi "$HOME/Library/Application Support/Code/User/settings.json"'

alias jarscan="java -jar ~/Documents/tools/jarscan.jar"

# Clear IntelliJ 'ignored files' list that's created when deleting an Intellij Maven module
function restore_intellij_modules() {
  xmlstarlet ed -P -L -d '/project/component/option[@name="ignoredFiles"]' "${code}"/BlueTeam/.idea/misc.xml
}

# Early days at Kenzan
alias accounts="vi '${notes}/accounts.txt'"
alias gather='"${code}"/elspleth/machines/scripts/gather-machine-rc.sh kenzan-laptop'

# Charter navigation
alias config='sibling -config'

# Charter scripting
alias forwardcreds='ssh-add -K /Users/curtisf/.ssh/charter_id_rsa &>/dev/null'
alias monday='"${code}"/elspleth-charter/jumpboxes/bastion/deploy-bastion-home.sh rekey'
alias clean_remote_branches_jira='"${code}"/elspleth-charter/scripts/cleanup-remote-branches.sh'
alias pull_charter_container_config='"${code}"/elspleth-charter/scripts/pull-charter-container-config.sh'
alias run_config_aware_tomcat_container='"${code}"/elspleth-charter/scripts/run-config-aware-tomcat-container.sh'

function gitk() {
  # The 'zoomed' state causes gitk to crash and zoomed reappears regularly
  sed -Ei 's/set geometry\(state\) zoomed/set geometry\(state\) normal/g' "$HOME/.config/git/gitk"
  (/usr/local/bin/gitk $@ > /dev/null 2>&1 &)
}

function cleanup_telepresence_deployments() {
  echo "found deployments if any:"
  kubectl get deployments | grep 'telepresence-' | cut -f1 -d' '
  echo "Continue?"
  read
  kubectl delete deployment $(kubectl get deployments | grep 'telepresence-' | cut -f1 -d' ')
}

function cleanup_telepresence_pods() {
  echo "found pods if any:"
  kubectl get pods | grep 'telepresence-' | cut -f1 -d' '
  echo "Continue?"
  read
  kubectl delete pod $(kubectl get pod | grep 'telepresence-' | cut -f1 -d' ')
}

# Charter VPN script. A replacement for GlobalProtectVPN.
function vpn() {
  "${gcode}/CurtisFleming/tiny-projects/vpn/vpn.sh" "$@"
}

charter_token() {
  # if [[ $# -ne 1 ]]; then echo "usage: ${FUNCNAME[0]} <token file suffix>"; return 1; fi
  # local which_one="$1" # e.g. '2' for charter-sso-token-key-2
  local which_one="${1:-3}"
  local token_file="/Users/curtisf/secrets/charter-sso-token-key-${which_one}"
  if ! [[ -f "${token_file}" ]]; then echo "No token file ${token_file}"; return 1; fi
  local token="$(oathtool -b --totp "$(cat "${token_file}")")"
  echo "${token}"
  echo -n "${token}" | pbcopy
  echo "Copied." 1>&2
}
alias token="charter_token"
alias toekn="token"

function nap() {
  local seconds="$1"
  for (( i=$seconds; i>0; i-- )); do
    echo "${i}.."
    sleep 1
  done
}

function charter_sso() {
  # if [[ $# -ne 1 ]]; then echo "usage: ${FUNCNAME[0]} <token file suffix>"; return 1; fi
  # local which_one="$1" # e.g. '2' for charter-sso-token-key-2
  local which_one="${1:-3}"
  local token_file="/Users/curtisf/secrets/charter-sso-token-key-${which_one}"
  if ! [[ -f "${token_file}" ]]; then echo "No token file ${token_file}"; return 1; fi

  echo -n "P2820029" | pbcopy
  echo "Copied username to clipboard"
  nap 6
  echo -n "$(cat ~/secrets/charter-sso)" | pbcopy
  echo "Copied password to clipboard"
  nap 8
  local token="$(oathtool -b --totp "$(cat "${token_file}")")"
  echo -n "${token}" | pbcopy
  echo "Copied token to clipboard"
  echo "token: ${token}"
}
alias sso='charter_sso'

here() {
  local where='.'
  if [ $# -eq 1 ]; then
    local where="$1"
  fi
  echo -n "$(realpath "${where}")/" | pbcopy
}

contiguouscode() {
  local dirs=(
  "${gcode}"/sspp/portals-backend/application/sidecars
  "${gcode}"/sspp/portals-backend/application/services
  "${gcode}"/sspp/portals-backend/application/libraries
  )
  echo "This will affect these directories. Are you sure?"
  echo -e "${dirs[@]/#/\\n - }"
  echo
  read
  for dir in "${dirs[@]}"; do
    (
    cd "${dir}"
    "$@"
    )
  done
}

abandon_changes_and_caches_and_refresh_develop() {
  contiguouscode _abandon_changes_refresh_develop
  contiguouscode _abandon_caches
}

_abandon_changes_refresh_develop() {
  slowgit clean -d -f
  slowgit checkout .
  slowgit stash drop
  slowgit checkout develop
  slowgit merge
}

_abandon_caches() {
  local projects
  local project
  mapfile -t projects < <(find "$(pwd)" -type d -maxdepth 1)
  echo "Cleaning target and node_modules for:"
  echo
  for project in "${projects[@]}"; do
     echo "${project}"
     rm -rf "${project}"/target "${project}"/node_modules
  done
}

# ---- -------------------------------------------------------------------------------------------------

alias docker-charter-artifactory-login='cat "$HOME/secrets/charter-artifactory-api-token" | \
  docker login --password-stdin \
  -u c-curtis.fleming@charter.com \
  docker-artifactory.spectrumflow.net'

alias docker-charter-gitlab-login='cat "$HOME/secrets/charter-gitlab-personal-access-token" | \
  docker login --password-stdin \
  -u c-curtis.fleming@charter.com \
  panamax.spectrumxg.com'

# Git squashing authorship utility
as_alee_author() {
  git config --global user.name 'Alee Khang'
  git config --global user.email 'C-Alee.Khang@charter.com'
}

# Git squashing authorship utility
as_curtis_author() {
  git config --global user.name 'Curtis Fleming'
  git config --global user.email 'C-Curtis.Fleming@charter.com'
}

# Git squashing authorship utility
as_yogesh_author() {
  git config --global user.name 'Janakiraman'
  git config --global user.email 'yogesh.janakiraman@charter.com'
}

# Git squashing authorship utility
as_andrew_author() {
  git config --global user.name 'Andrew VanLoo'
  git config --global user.email 'c-andrew.vanloo1@charter.com'
}

# Git squashing authorship utility
as_dan_perron_author() {
  git config --global user.name 'Dan Perron'
  git config --global user.email 'dan.perron@charter.com'
}

# Clears annoying Iterm2 introduction
clear

