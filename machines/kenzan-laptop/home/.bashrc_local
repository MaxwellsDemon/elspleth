# Kenzan laptop specific .bashrc settings
# Should be sourced by .bashrc

PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
PATH="/usr/local/opt/node@10/bin:$PATH"

source "${code}/elspleth-charter/scripts/website-library.sh"

alias sow='open ${HOME}/Documents/projects/charter/gitlab-migration/kickoff-docs/FINAL\ Charter-Kenzan\ -\ Statement\ of\ Work\ No.\ 7\ \(Legacy\ Decomission\)\ \(05.20.20\)\ Clean\ v2.docx'

export_gitlab() {
  export API_V4_TOKEN="$(cat "${HOME}"/secrets/charter-gitlab-personal-access-token)"
  export CI_API_V4_URL='https://gitlab.spectrumflow.net/api/v4'
  echo "exported API_V4_TOKEN"
  echo "exported CI_API_V4_URL"
}

export_personal_artifactory() {
  export ARTIFACTORY_EMAIL='c-curtis.fleming@charter.com'
  export ARTIFACTORY_API_KEY="$(cat "${HOME}"/secrets/charter-artifactory-api-token)"
  _common_export_artifactory
}

export_sspp_ci_artifactory() {
  export ARTIFACTORY_EMAIL='sspp-ci'
  export ARTIFACTORY_API_KEY="$(cat "${HOME}"/secrets/charter-artifactory-sspp-ci-token)"
  _common_export_artifactory
}

_common_export_artifactory() {
  export BASE_ARTIFACTORY_DOCKER_URL="docker-artifactory.spectrumflow.net/docker/sspp/portals/"
  echo "exported ARTIFACTORY_EMAIL=${ARTIFACTORY_EMAIL}"
  echo "exported ARTIFACTORY_API_KEY"
  echo "exported BASE_ARTIFACTORY_DOCKER_URL=${BASE_ARTIFACTORY_DOCKER_URL}"
}

_kube_envs=($(kubectx))
for kube_env in "${_kube_envs[@]}"; do
  alias "${kube_env}=kubectx ${kube_env}"
done

_projects_to_alias=(
$(find "${gcode}"/sspp/portals-backend/application/services -maxdepth 1)
$(find "${gcode}"/sspp/portals-backend/application/libraries -maxdepth 1)
$(find "${gcode}"/sspp/portals-backend/application/sidecars -maxdepth 1)
$(find "${gcode}"/sspp/platforms -maxdepth 1)
$(find "${gcode}"/sspp/portals-backend -maxdepth 1)
$(find "${gcode}"/sspp -maxdepth 1)
$(find "${gcode}"/CurtisFleming -maxdepth 1)
"${gcode}"/sspp/portals-backend/release-plan/spectrummobile-release-plan/spectrummobile-release-plan
"${gcode}"/sspp/portals-backend/release-plan/myspectrumapp-release-plan/myspectrumapp-release-plan
"${gcode}"/sspp/portals-backend/release-plan/spectrum-release-plan/spectrum-release-plan
"${gcode}"/sspp/portals-backend/release-plan/spectrumbusiness-release-plan/spectrumbusiness-release-plan
"${gcode}"/sspp/portals-backend/release-plan/active-release-plan-report
)
for _project_to_alias in "${_projects_to_alias[@]}"; do
  alias "${_project_to_alias##*/}=cd '${_project_to_alias}'"
done

# Often enough
clone_sspp() {
  "${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams/turquoise/gitlab-cloning/clone-gitlab-repos.sh "${gcode}" sspp "$HOME/secrets/charter-gitlab-personal-access-token"
}
alias cloner='cd "${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams/platform/gitlab-cloning'
alias tiny='cd "${gcode}"/CurtisFleming/tiny-projects'
alias switch='/Users/curtisf/.m2/switch.sh'

# Incubating ideas for helper functions
alias both='jenkins docker 1 && jenkins puppet 1'
alias j='jenkins'

alias PR='bitbucket 2'
alias PRs='bitbucket 3'
alias prs='bitbucket 3'

alias release='"${gcode}"/sspp/portals-backend/application/services/spc-dev-toolbox/teams/innovation/release.sh'

# References
alias curl_notes='open ~/Documents/projects/charter/curl-to-end-all-curls.md'
alias cassandra_notes='open ~/Documents/projects/charter/efforts/cassandra/cassandra-notes.md'

# Node
alias node6='bash "${gcode}"/sspp/portals-backend/developer-machine-setup/developer_tools.bash node6'
alias node10='bash "${gcode}"/sspp/portals-backend/developer-machine-setup/developer_tools.bash node10'

# Mac
alias json='pbpaste | jq | pbcopy'

# Stash Places
alias ourlib='cd "${code}"/portals-jenkins-library'
alias theirlib='cd "${code}"/jenkins_shared_library'
alias dsl='cd "${code}"/jenkins-job-dsl'
alias dp='cd "${code}"/docker-provisioning'
alias cnethelm='cd "${code}"/cnet_helm'

# Gitlab Places
alias gcode='cd "${gcode}"'
alias sspp='cd "${gcode}"/sspp'
alias services='cd "${gcode}"/sspp/portals-backend/application/services'
alias libs='cd "${gcode}"/sspp/portals-backend/application/libraries'
alias notes='cd "${notes}"'
alias projects='cd ~/Documents/projects'
alias charter='cd "${HOME}"/Documents/projects/charter'

# Apps
alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
alias google='chrome'
alias grapher='(cd ~/Documents/tools/grapher && java -jar Fleye.jar 1> /dev/null 2>&1 &)'
alias fleye='grapher'

alias vscoderc='vi "$HOME/Library/Application Support/Code/User/settings.json"'

# Usage: java -jar decrypter.jar <path_to_pem_file> <key_to_decrypt>
alias decrypt="java -jar ~/Documents/tools/decrypter.jar"
alias jarscan="java -jar ~/Documents/tools/jarscan.jar"
alias splunk='chrome https://charter.splunkcloud.com'
alias swagbuild='mvn clean install -pl'

# Clear IntelliJ 'ignored files' list that's created when deleting an Intellij Maven module
function restore_intellij_modules() {
  xmlstarlet ed -P -L -d '/project/component/option[@name="ignoredFiles"]' "${code}"/BlueTeam/.idea/misc.xml
}

# Early days at Kenzan
alias accounts="vi '${notes}/accounts.txt'"
alias todo="vi '${notes}/todo.txt'"
alias gather='"${code}"/elspleth/machines/scripts/gather-machine-rc.sh kenzan-laptop'

# Charter navigation
alias config='sibling -config'
alias lifecycle='cd ../release-lifecycle'

# Charter scripting
alias forwardcreds='ssh-add -K /Users/curtisf/.ssh/charter_id_rsa &>/dev/null'
alias monday='"${code}"/elspleth-charter/jumpboxes/bastion/deploy-bastion-home.sh rekey'
alias exercisedockerprovisioning='"${code}"/elspleth-charter/scripts/exercise-docker-provisioning.sh'
alias exercisedockerprovisioningundo='"${code}"/elspleth-charter/scripts/exercise-docker-provisioning-undo.sh'
alias exercisedockerprovisioninglist='"${code}"/elspleth-charter/scripts/exercise-docker-provisioning-list.sh'
alias clean_remote_branches_jira='"${code}"/elspleth-charter/scripts/cleanup-remote-branches.sh'
alias pull_charter_container_config='"${code}"/elspleth-charter/scripts/pull-charter-container-config.sh'
alias run_config_aware_tomcat_container='"${code}"/elspleth-charter/scripts/run-config-aware-tomcat-container.sh'

# auto-complete
if [ -f $(brew --prefix)/etc/bash_completion ]; then
. $(brew --prefix)/etc/bash_completion
fi

function gitk() {
  # The 'zoomed' state causes gitk to crash and zoomed reappears regularly
  sed -Ei 's/set geometry\(state\) zoomed/set geometry\(state\) normal/g' "$HOME/.config/git/gitk"
  (/usr/local/bin/gitk $@ > /dev/null 2>&1 &)
}

# From Walter maybe
function decrypter() {
  echo 'Looks like shared-lib-config grabs privateKey.pem from a S3 client :sadparrot:'
  echo 'Search all of Slack for `-u` to find a curl that has service account creds!'
  if [ $# -ne 2 ]; then echo "Usage: decrypter <key file> <encoded content file>"; return 1; fi
  base64 -D -i $2 | openssl rsautl -decrypt -inkey $1  -out result.tmp
  cat result.tmp
  rm result.tmp
}

function cleanup_telepresence() {
  echo "found deployments if any:"
  kubectl get deployments | grep 'telepresence-' | cut -f1 -d' '
  echo "Continue?"
  read
  kubectl delete deployment $(kubectl get deployments | grep 'telepresence-' | cut -f1 -d' ')
}

# Kenzan/Amdocs VPNs
function vpn() {
  local base=~/.anyconnect.vpn.
  local vpn_name="$1"
  local config="${base}${vpn_name}"
  if [ ! -f "${config}" ]; then echo "usage: vpn <vpn short name>";  echo "VPN config file not found: ${config}"; echo "Options are:"; ls "${base}"* | sed -E 's/.+\.([^.]+)/\1/g'; return 1; fi
  /opt/cisco/anyconnect/bin/vpn disconnect || :
  killall "Cisco AnyConnect Secure Mobility Client"
  sleep 2
  # (echo -n "$(cat ~/secrets/machine-secret)" | pbcopy) || true
  # (cd "${code}/spc-dev-toolbox/hosts" && ./apply_hosts_file.sh "${vpn_name}-vpn-hosts")
  (echo -n "$(cat ~/secrets/vpn.${vpn_name}-secret)" | pbcopy) || true
  cp "${config}" ~/.anyconnect
  open -a "Cisco AnyConnect Secure Mobility Client"
  # echo "Opening Charter VPN usage spreadsheet..."
  # open 'https://docs.google.com/spreadsheets/d/1kMdYYT7OedjSuj-9fokntYB5kvlBq6WnZjW2vJmtlJY/edit#gid=0'
}

function charter_sso() {
  # echo -n "$(cat ~/secrets/charter-sso)$1" | pbcopy
  echo -n "$(cat ~/secrets/charter-sso)$(bash ~/secrets/print-charter-sso-security-code.sh)" | pbcopy
  echo "Copied to clipboard"
  echo 'New password did not work? Use password without token about twice to be prompted to enter timed token.'
}
alias sso='charter_sso'

# Gitlab mirroring
mirror() {
  if [ $# -ne 2 ]; then
    echo "usage: $0 <spc/spclib/etc> <repo name or resolvable directory of name>"
    return 1
  fi
  local project_name="$2"
  if [ -d "$2" ]; then
    local project_name="$(realpath "$2")"
    local project_name="$(basename "${project_name}")"
  fi
  local project_name="${project_name%/}"
  local pw="$(cat "$HOME/secrets/charter-stash-user-gitlab-integration-token")"
  echo "https://gitlab-integration@stash.dev-charter.net/stash/scm/${1%/}/${project_name}.git" | pbcopy
  echo -e 'HTTP clone url copied\n'; sleep 6
  echo "${pw}" | pbcopy
  echo -e 'Password copied\n'; sleep 4
  echo "${project_name}" | pbcopy
  echo -e 'Project name copied\n'
}

here() {
  local where='.'
  if [ $# -eq 1 ]; then
    local where="$1"
  fi
  echo -n "$(realpath "${where}")/" | pbcopy
}

zuul_ssh() {
  echo -e "set -o vi; \n cd /usr/share/tomcat7/; \n sudo vi -R logs/catalina.out" | pbcopy
  ssh $@
}

# ---- Sketch temporary logic for Charter Tooling Migration --------------------------------------------

before_and_after_maven_dependency_tree() {
  if [ ! -d .git ]; then
    echo "Change directory to a git project root"
    return 1
  fi
  if [ ! -f pom.xml ]; then
    echo "Change directory to a maven project root"
    return 1
  fi
  mvn dependency:tree &> /dev/null
  mvn dependency:tree > "$HOME/downloads/after"
  git add .
  git stash
  mvn dependency:tree &> /dev/null
  mvn dependency:tree > "$HOME/downloads/before"
  git stash pop
  (
  cd "$HOME/downloads"
  git diff before after
  )
}

contiguouscode() {
  if [ $# -ne 1 ]; then echo "usage: $0 <command e.g. refresh_develop>"; return 1; fi
  local dirs=(
  "${gcode}"/sspp/portals-backend/application/sidecars
  "${gcode}"/sspp/portals-backend/application/services
  "${gcode}"/sspp/portals-backend/application/libraries
  )
  echo "This will affect these directories. Are you sure?"
  echo -e "${dirs[@]/#/\\n - }"
  echo
  read
  for dir in "${dirs[@]}"; do
    (
    cd "${dir}"
    "$@"
    )
  done
}

abandon_changes_refresh_develop() {
  contiguouscode _abandon_changes_refresh_develop
}

_abandon_changes_refresh_develop() {
  slowgit stash
  slowgit stash drop
  slowgit stash drop
  slowgit checkout develop
  slowgit merge
}

# ---- -------------------------------------------------------------------------------------------------

alias docker-charter-artifactory-login='cat "$HOME/secrets/charter-artifactory-api-token" | \
  docker login --password-stdin \
  -u c-curtis.fleming@charter.com \
  docker-artifactory.spectrumflow.net'

alias docker-charter-gitlab-login='cat "$HOME/secrets/charter-gitlab-personal-access-token" | \
  docker login --password-stdin \
  -u c-curtis.fleming@charter.com \
  panamax.spectrumxg.com'

# Git squashing authorship utility
as_alee_author() {
  git config --global user.name 'Alee Khang'
  git config --global user.email 'C-Alee.Khang@charter.com'
}

# Git squashing authorship utility
as_curtis_author() {
  git config --global user.name 'Curtis Fleming'
  git config --global user.email 'C-Curtis.Fleming@charter.com'
}

# Clears annoying Iterm2 introduction
clear

