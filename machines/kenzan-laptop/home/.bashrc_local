# Kenzan laptop specific .bashrc settings
# Should be sourced by .bashrc

PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
PATH="/usr/local/opt/node@10/bin:$PATH"

source "${code}/elspleth-charter/scripts/website-library.sh"

alias pirate='cd "${code}"/cnet_helm'
alias graphql='cd "${gcode}"/sspp/portals-backend/application/services/graphql'
alias sow='open ${HOME}/Documents/projects/charter/gitlab-migration/kickoff-docs/FINAL\ Charter-Kenzan\ -\ Statement\ of\ Work\ No.\ 7\ \(Legacy\ Decomission\)\ \(05.20.20\)\ Clean\ v2.docx'

export_gitlab() {
  export API_V4_TOKEN="$(cat "${HOME}/secrets/charter-gitlab-personal-access-token")"
  export CI_API_V4_URL='https://gitlab.spectrumflow.net/api/v4'
  echo "exported API_V4_TOKEN"
  echo "exported CI_API_V4_URL"
}

# Gitlab mirroring
mirror() {
  if [ $# -ne 2 ]; then
    echo "usage: $0 <spc/spclib/etc> <repo name or resolvable directory of name>"
    return 1
  fi
  local project_name="$2"
  if [ -d "$2" ]; then
    local project_name="$(realpath "$2")"
    local project_name="$(basename "${project_name}")"
  fi
  local project_name="${project_name%/}"
  local pw="$(cat "$HOME/secrets/charter-stash-user-gitlab-integration-token")"
  echo "https://gitlab-integration@stash.dev-charter.net/stash/scm/${1%/}/${project_name}.git" | pbcopy
  # echo "https://gitlab-integration:${pw}@stash.dev-charter.net/stash/scm/${1%/}/${project_name}.git" | pbcopy
  echo -e 'HTTP clone url copied\n'
  sleep 6
  # read -p 'enter for copy of password'
  echo "${pw}" | pbcopy
  echo -e 'Password copied\n'
  sleep 5
  # read -p 'enter for copy of project name'
  echo "${project_name}" | pbcopy
  echo -e 'Project name copied\n'
}

function zuul_ssh() {
  echo -e "set -o vi; \n cd /usr/share/tomcat7/; \n sudo vi -R logs/catalina.out" | pbcopy
  ssh $@; clear
}

_kube_envs=($(kubectx))
for kube_env in "${_kube_envs[@]}"; do
  alias "${kube_env}=kubectx ${kube_env}"
done

# Incubating ideas for helper functions
alias both='jenkins docker 1 && jenkins puppet 1'
alias j='jenkins'

alias PR='bitbucket 2'
alias PRs='bitbucket 3'
alias prs='bitbucket 3'

alias release='"${code}"/spc-dev-toolbox/teams/innovation/release.sh'

# References
alias curl_notes='open ~/Documents/projects/charter/curl-to-end-all-curls.md'
alias cassandra_notes='open ~/Documents/projects/charter/efforts/cassandra/cassandra-notes.md'

# Node
alias node6='bash "${code}"/developer-machine-setup/developer_tools.bash node6'
alias node10='bash "${code}"/developer-machine-setup/developer_tools.bash node10'

# Current project - short lived
alias telepresence='telepresence --logfile /dev/null'

# Mac
alias json='pbpaste | jq | pbcopy'

# Places
alias gcode='cd "${gcode}"'
alias sspp='cd "${gcode}"/sspp'
alias services='cd "${gcode}"/sspp/portals-backend/application/services'
alias libs='cd "${gcode}"/sspp/portals-backend/application/libraries'
alias releaseplan='cd "${gcode}"/sspp/portals-backend/release-plan'
alias notes='cd "${notes}"'
alias projects='cd ~/Documents/projects'
alias charter='cd "${HOME}"/Documents/projects/charter'
alias ourlib='cd "${code}"/portals-jenkins-library'
alias theirlib='cd "${code}"/jenkins_shared_library'
alias dsl='cd "${code}"/jenkins-job-dsl'
alias box='cd "${code}"/spc-dev-toolbox'
alias teams='cd "${code}"/spc-dev-toolbox/teams'
alias dp='cd "${code}"/docker-provisioning'
alias swag='cd "${code}"/spc-swagger-doc'
alias ticket='cd "$HOME/Documents/projects/charter/ticket"'
alias pipelines='cd "${gcode}"/sspp/portals-backend/pipelines'
alias mario='cd "${gcode}"/sspp/portals-backend/pipelines'

# Apps
alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
alias google='chrome'
alias grapher='(cd ~/Documents/tools/grapher && java -jar Fleye.jar 1> /dev/null 2>&1 &)'
alias fleye='grapher'

alias vscoderc='vi "$HOME/Library/Application Support/Code/User/settings.json"'

# Usage: java -jar decrypter.jar <path_to_pem_file> <key_to_decrypt>
alias decrypt="java -jar ~/Documents/tools/decrypter.jar"
alias jarscan="java -jar ~/Documents/tools/jarscan.jar"
alias splunk='chrome https://charter.splunkcloud.com'
alias swagbuild='mvn clean install -pl'

# Clear IntelliJ 'ignored files' list that's created when deleting an Intellij Maven module
function restore_intellij_modules() {
  xmlstarlet ed -P -L -d '/project/component/option[@name="ignoredFiles"]' "${code}"/BlueTeam/.idea/misc.xml
}

# Early days at Kenzan
alias accounts="vi '${notes}/accounts.txt'"
alias todo="vi '${notes}/todo.txt'"
alias gather='"${code}"/elspleth/machines/scripts/gather-machine-rc.sh kenzan-laptop'

# Charter
alias forwardcreds='ssh-add -K /Users/curtisf/.ssh/charter_id_rsa &>/dev/null'
alias monday='"${code}"/elspleth-charter/jumpboxes/bastion/deploy-bastion-home.sh rekey'
alias exercisedockerprovisioning='"${code}"/elspleth-charter/scripts/exercise-docker-provisioning.sh'
alias exercisedockerprovisioningundo='"${code}"/elspleth-charter/scripts/exercise-docker-provisioning-undo.sh'
alias exercisedockerprovisioninglist='"${code}"/elspleth-charter/scripts/exercise-docker-provisioning-list.sh'
alias clean_remote_branches_jira='"${code}"/elspleth-charter/scripts/cleanup-remote-branches.sh'
alias pull_charter_container_config='"${code}"/elspleth-charter/scripts/pull-charter-container-config.sh'
alias run_config_aware_tomcat_container='"${code}"/elspleth-charter/scripts/run-config-aware-tomcat-container.sh'

# auto-complete
if [ -f $(brew --prefix)/etc/bash_completion ]; then
. $(brew --prefix)/etc/bash_completion
fi

# From Walter maybe
function decrypter() {
  echo 'Looks like shared-lib-config grabs privateKey.pem from a S3 client :sadparrot:'
  echo 'Search all of Slack for `-u` to find a curl that has service account creds!'
  if [ $# -ne 2 ]; then echo "Usage: decrypter <key file> <encoded content file>"; return 1; fi
  base64 -D -i $2 | openssl rsautl -decrypt -inkey $1  -out result.tmp
  cat result.tmp
  rm result.tmp
}

function cleanup_telepresence() {
  echo "found deployments if any:"
  kubectl get deployments | grep 'telepresence-' | cut -f1 -d' '
  echo "Continue?"
  read
  kubectl delete deployment $(kubectl get deployments | grep 'telepresence-' | cut -f1 -d' ')
}

# Kenzan/Amdocs VPNs
function vpn() {
  local base=~/.anyconnect.vpn.
  local vpn_name="$1"
  local config="${base}${vpn_name}"
  if [ ! -f "${config}" ]; then echo "usage: vpn <vpn short name>";  echo "VPN config file not found: ${config}"; echo "Options are:"; ls "${base}"* | sed -E 's/.+\.([^.]+)/\1/g'; return 1; fi
  /opt/cisco/anyconnect/bin/vpn disconnect || :
  killall "Cisco AnyConnect Secure Mobility Client"
  sleep 2
  # (echo -n "$(cat ~/secrets/machine-secret)" | pbcopy) || true
  # (cd "${code}/spc-dev-toolbox/hosts" && ./apply_hosts_file.sh "${vpn_name}-vpn-hosts")
  (echo -n "$(cat ~/secrets/vpn.${vpn_name}-secret)" | pbcopy) || true
  cp "${config}" ~/.anyconnect
  open -a "Cisco AnyConnect Secure Mobility Client"
  # echo "Opening Charter VPN usage spreadsheet..."
  # open 'https://docs.google.com/spreadsheets/d/1kMdYYT7OedjSuj-9fokntYB5kvlBq6WnZjW2vJmtlJY/edit#gid=0'
}

function charter_sso() {
  # echo -n "$(cat ~/secrets/charter-sso)$1" | pbcopy
  echo -n "$(cat ~/secrets/charter-sso)$(bash ~/secrets/print-charter-sso-security-code.sh)" | pbcopy
  echo "Copied to clipboard"
  echo 'New password did not work? Use password without token about twice to be prompted to enter timed token.'
}
alias sso='charter_sso'

alias docker-charter-artifactory-login='cat "$HOME/secrets/charter-artifactory-api-key" | \
  docker login --password-stdin \
  -u c-curtis.fleming@charter.com \
  docker-artifactory.spectrumflow.net'

alias docker-charter-gitlab-login='cat "$HOME/secrets/charter-gitlab-personal-access-token" | \
  docker login --password-stdin \
  -u c-curtis.fleming@charter.com \
  panamax.spectrumxg.com'

# Git squashing authorship utility
as_alee_author() {
  git config --global user.name 'Alee Khang'
  git config --global user.email 'C-Alee.Khang@charter.com'
}

# Git squashing authorship utility
as_curtis_author() {
  git config --global user.name 'Curtis Fleming'
  git config --global user.email 'C-Curtis.Fleming@charter.com'
}

# Clears annoying Iterm2 introduction
clear

